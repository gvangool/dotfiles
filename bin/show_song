#!/usr/bin/env python

import logging
from optparse import OptionParser
import sys
import time

try:
    import simplejson as json
except ImportError:
    import json


def monitor(cb):
    '''
    Monitor stdin, load the JSON object and call ``cb`` with the JSON object.
    '''
    try:
        while True:
            l = sys.stdin.readline()
            try:
                cb(json.loads(l))
            except ValueError:
                logging.exception(l)
    except KeyboardInterrupt:
        logging.debug('Received Ctrl-C, exiting')

def main():
    logging.debug('Starting show_song information')
    help_text = '''A simple notifier to see which song is playing, reads
information as a JSON object from STDIN. Works with mocp_show_song_info.
Like: "mocp_show_song_info | show_song -l"'''
    parser = OptionParser(epilog=help_text)
    parser.add_option('-l',
                      '--libnotify',
                      help='A notifier based on libnotify (small pop-up window).',
                      action='store_true',
                      dest='libnotify')
    parser.add_option('-c',
                      '--curses',
                      help='A notifier based on ncurses. It will take over your terminal and show the current song information.',
                      action='store_true',
                      dest='curses')
    options, args = parser.parse_args()

    if options.libnotify:
        logging.info('Starting libnotify notifier')
        main_libnotify()
    elif options.curses:
        logging.info('Starting curses notifier')
        main_curses()
    else:
        logging.info('Starting console notifier')
        def std_out(obj):
            'Pretty-print the json object on stdout'
            json.dump(obj, sys.stdout, sort_keys=True, indent=4)
            sys.stdout.write('\n')
            sys.stdout.flush()
        monitor(std_out)

n = None
def main_libnotify():
    try:
        import pynotify
    except ImportError:
        logging.error('No pynotify installed')
        return
    def show_info(info):
        if info['State'] == 'STOP':
            title = 'MOC info'
            msg = 'MOC is stopped...'
        elif info['State'] == 'PAUSE':
            title = 'MOC info'
            msg = 'MOC is paused...'
        else:
            title = 'Song info'
            msg = '%(Artist)s - %(SongTitle)s' % info
            msg += '\n%(Album)s -- %(TotalTime)s' % info
        global n
        if n is not None:
            n.close()
        n = pynotify.Notification(title, msg)
        n.set_urgency(pynotify.URGENCY_CRITICAL)
        n.set_timeout(4)
        n.show()
        logging.debug('Showed notification: %s' % msg)
    if pynotify.init('MOC'):
        monitor(show_info)
    else:
        logging.error('Failed to initialize pynotify')

def main_curses():
    import curses
    from curses.wrapper import wrapper
    def _run(stdscr):
        curses.curs_set(0)
        curses.use_default_colors()
        curses.init_pair(1, curses.COLOR_BLUE, -1)
        curses.init_pair(2, curses.COLOR_GREEN, -1)
        curses.init_pair(3, curses.COLOR_RED, -1)

        stdscr.clear()
        stdscr.refresh()

        border_win = curses.newwin(5, 78, 0, 1)
        border_win.border()
        border_win.addstr(2, 34, 'Loading')
        border_win.addstr(2, 41, '...', curses.color_pair(1) | curses.A_BLINK)
        border_win.refresh()

        win = curses.newwin(3, 70, 1, 2)
        def show_info(info):
            win.clear()
            if info['State'] == 'STOP':
                win.addstr(1, 1, 'MOC is stopped...', curses.color_pair(3))
            elif info['State'] == 'PAUSE':
                win.addstr(1, 1, 'MOC is paused...', curses.color_pair(3))
            else:
                win.addstr(0, 1, '%(Artist)s - %(SongTitle)s' % info, curses.color_pair(1))
                win.addstr(1, 1, '%(Album)s -- %(TotalTime)s' % info, curses.color_pair(2))
            win.refresh()
        monitor(show_info)
    wrapper(_run)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO,
                        format='%(asctime)s %(levelname)s %(message)s',
                        filename='/tmp/show_song.log',
                        filemode='w')
    main()
